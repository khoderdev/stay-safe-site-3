// vite.config.js
import { defineConfig } from "file:///C:/Users/Admin/Desktop/animated-sites/stay-safe/client/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/Admin/Desktop/animated-sites/stay-safe/client/node_modules/@vitejs/plugin-react/dist/index.mjs";
import tailwindcss from "file:///C:/Users/Admin/Desktop/animated-sites/stay-safe/client/node_modules/@tailwindcss/vite/dist/index.mjs";
var vite_config_default = defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    proxy: {
      // Proxy any requests to '/upload' to 'http://localhost:8800'
      "/upload": {
        target: "http://localhost:8800",
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/upload/, "/upload")
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxBZG1pblxcXFxEZXNrdG9wXFxcXGFuaW1hdGVkLXNpdGVzXFxcXHN0YXktc2FmZVxcXFxjbGllbnRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXEFkbWluXFxcXERlc2t0b3BcXFxcYW5pbWF0ZWQtc2l0ZXNcXFxcc3RheS1zYWZlXFxcXGNsaWVudFxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvQWRtaW4vRGVza3RvcC9hbmltYXRlZC1zaXRlcy9zdGF5LXNhZmUvY2xpZW50L3ZpdGUuY29uZmlnLmpzXCI7Ly8gaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbi8vIGltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjtcbi8vIGltcG9ydCB7IFZpdGVQV0EgfSBmcm9tIFwidml0ZS1wbHVnaW4tcHdhXCI7XG4vLyBpbXBvcnQgeyB2aXN1YWxpemVyIH0gZnJvbSBcInJvbGx1cC1wbHVnaW4tdmlzdWFsaXplclwiO1xuLy8gaW1wb3J0IHsgY3JlYXRlSHRtbFBsdWdpbiB9IGZyb20gXCJ2aXRlLXBsdWdpbi1odG1sXCI7XG5cbi8vIGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4vLyAgIHBsdWdpbnM6IFtcbi8vICAgICByZWFjdCgpLFxuLy8gICAgIFZpdGVQV0Eoe1xuLy8gICAgICAgcmVnaXN0ZXJUeXBlOiBcImF1dG9VcGRhdGVcIixcbi8vICAgICAgIGluY2x1ZGVBc3NldHM6IFtcImZhdmljb24uaWNvXCIsIFwicm9ib3RzLnR4dFwiLCBcImFwcGxlLXRvdWNoLWljb24ucG5nXCJdLFxuLy8gICAgICAgbWFuaWZlc3Q6IHtcbi8vICAgICAgICAgbmFtZTogXCJTdGF5IFNhZmVcIixcbi8vICAgICAgICAgc2hvcnRfbmFtZTogXCJTdGF5IFNhZmVcIixcbi8vICAgICAgICAgZGVzY3JpcHRpb246IFwiU3RheSBTYWZlIEhlYWx0aCBBcHBsaWNhdGlvblwiLFxuLy8gICAgICAgICB0aGVtZV9jb2xvcjogXCIjZmZmZmZmXCIsXG4vLyAgICAgICAgIGljb25zOiBbXG4vLyAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgc3JjOiBcInB3YS0xOTJ4MTkyLnBuZ1wiLFxuLy8gICAgICAgICAgICAgc2l6ZXM6IFwiMTkyeDE5MlwiLFxuLy8gICAgICAgICAgICAgdHlwZTogXCJpbWFnZS9wbmdcIixcbi8vICAgICAgICAgICB9LFxuLy8gICAgICAgICAgIHtcbi8vICAgICAgICAgICAgIHNyYzogXCJwd2EtNTEyeDUxMi5wbmdcIixcbi8vICAgICAgICAgICAgIHNpemVzOiBcIjUxMng1MTJcIixcbi8vICAgICAgICAgICAgIHR5cGU6IFwiaW1hZ2UvcG5nXCIsXG4vLyAgICAgICAgICAgfSxcbi8vICAgICAgICAgXSxcbi8vICAgICAgIH0sXG4vLyAgICAgICB3b3JrYm94OiB7XG4vLyAgICAgICAgIHJ1bnRpbWVDYWNoaW5nOiBbXG4vLyAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgdXJsUGF0dGVybjogL15odHRwczpcXC9cXC9mb250c1xcLmdvb2dsZWFwaXNcXC5jb21cXC8uKi9pLFxuLy8gICAgICAgICAgICAgaGFuZGxlcjogXCJDYWNoZUZpcnN0XCIsXG4vLyAgICAgICAgICAgICBvcHRpb25zOiB7XG4vLyAgICAgICAgICAgICAgIGNhY2hlTmFtZTogXCJnb29nbGUtZm9udHMtY2FjaGVcIixcbi8vICAgICAgICAgICAgICAgZXhwaXJhdGlvbjoge1xuLy8gICAgICAgICAgICAgICAgIG1heEVudHJpZXM6IDEwLFxuLy8gICAgICAgICAgICAgICAgIG1heEFnZVNlY29uZHM6IDYwICogNjAgKiAyNCAqIDM2NSwgLy8gPD09IDM2NSBkYXlzXG4vLyAgICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgICAgICAgIGNhY2hlYWJsZVJlc3BvbnNlOiB7XG4vLyAgICAgICAgICAgICAgICAgc3RhdHVzZXM6IFswLCAyMDBdLFxuLy8gICAgICAgICAgICAgICB9LFxuLy8gICAgICAgICAgICAgfSxcbi8vICAgICAgICAgICB9LFxuLy8gICAgICAgICBdLFxuLy8gICAgICAgfSxcbi8vICAgICB9KSxcbi8vICAgICBjcmVhdGVIdG1sUGx1Z2luKHtcbi8vICAgICAgIG1pbmlmeTogdHJ1ZSxcbi8vICAgICAgIGluamVjdDoge1xuLy8gICAgICAgICBkYXRhOiB7XG4vLyAgICAgICAgICAgaW5qZWN0U2NyaXB0OiBgXG4vLyAgICAgICAgICAgICA8c2NyaXB0PlxuLy8gICAgICAgICAgICAgICAvLyBJbmxpbmUgY3JpdGljYWwgSlMgaGVyZVxuLy8gICAgICAgICAgICAgICB3aW5kb3cucGVyZm9ybWFuY2UubWFyaygnYXBwLWxvYWRlZCcpO1xuLy8gICAgICAgICAgICAgPC9zY3JpcHQ+XG4vLyAgICAgICAgICAgYCxcbi8vICAgICAgICAgfSxcbi8vICAgICAgIH0sXG4vLyAgICAgfSksXG4vLyAgICAgdmlzdWFsaXplcih7XG4vLyAgICAgICBvcGVuOiBmYWxzZSxcbi8vICAgICAgIGd6aXBTaXplOiB0cnVlLFxuLy8gICAgICAgYnJvdGxpU2l6ZTogdHJ1ZSxcbi8vICAgICB9KSxcbi8vICAgXSxcbi8vICAgYnVpbGQ6IHtcbi8vICAgICBzb3VyY2VtYXA6IHRydWUsXG4vLyAgICAgcm9sbHVwT3B0aW9uczoge1xuLy8gICAgICAgb3V0cHV0OiB7XG4vLyAgICAgICAgIG1hbnVhbENodW5rczoge1xuLy8gICAgICAgICAgIFwicmVhY3QtdmVuZG9yXCI6IFtcInJlYWN0XCIsIFwicmVhY3QtZG9tXCJdLFxuLy8gICAgICAgICAgIFwiZnJhbWVyLW1vdGlvblwiOiBbXCJmcmFtZXItbW90aW9uXCJdLFxuLy8gICAgICAgICAgIHJlY2hhcnRzOiBbXCJyZWNoYXJ0c1wiXSxcbi8vICAgICAgICAgICB1dGlsczogW1wiLi9zcmMvdXRpbHMvQW5pbWF0aW9ucy5qc3hcIiwgXCIuL3NyYy91dGlscy9oZWxwZXJzLmpzXCJdLFxuLy8gICAgICAgICAgIGNvbXBvbmVudHM6IFtcbi8vICAgICAgICAgICAgIFwiLi9zcmMvY29tcG9uZW50cy9iYWN0ZXJpYS9CYWN0ZXJpYS50c3hcIixcbi8vICAgICAgICAgICAgIFwiLi9zcmMvY29tcG9uZW50cy9IYW5kTW9uc3Rlci5qc3hcIixcbi8vICAgICAgICAgICAgIFwiLi9zcmMvY29tcG9uZW50cy9CYWxsb29uL0JhbGxvb24uanN4XCIsXG4vLyAgICAgICAgICAgXSxcbi8vICAgICAgICAgfSxcbi8vICAgICAgIH0sXG4vLyAgICAgfSxcbi8vICAgICBjc3NDb2RlU3BsaXQ6IHRydWUsXG4vLyAgICAgbWluaWZ5OiBcInRlcnNlclwiLFxuLy8gICAgIHRlcnNlck9wdGlvbnM6IHtcbi8vICAgICAgIGNvbXByZXNzOiB7XG4vLyAgICAgICAgIGRyb3BfY29uc29sZTogdHJ1ZSxcbi8vICAgICAgICAgZHJvcF9kZWJ1Z2dlcjogdHJ1ZSxcbi8vICAgICAgIH0sXG4vLyAgICAgfSxcbi8vICAgICByZXBvcnRDb21wcmVzc2VkU2l6ZTogdHJ1ZSxcbi8vICAgICBjaHVua1NpemVXYXJuaW5nTGltaXQ6IDEwMDAsXG4vLyAgIH0sXG4vLyAgIHNlcnZlcjoge1xuLy8gICAgIGhvc3Q6IHRydWUsXG4vLyAgICAgcHJveHk6IHtcbi8vICAgICAgIFwiL3VwbG9hZFwiOiB7XG4vLyAgICAgICAgIHRhcmdldDogXCJodHRwOi8vbG9jYWxob3N0Ojg4MDBcIixcbi8vICAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxuLy8gICAgICAgICByZXdyaXRlOiAocGF0aCkgPT4gcGF0aC5yZXBsYWNlKC9eXFwvdXBsb2FkLywgXCIvdXBsb2FkXCIpLFxuLy8gICAgICAgfSxcbi8vICAgICB9LFxuLy8gICB9LFxuLy8gICBvcHRpbWl6ZURlcHM6IHtcbi8vICAgICBpbmNsdWRlOiBbXCJyZWFjdFwiLCBcInJlYWN0LWRvbVwiLCBcImZyYW1lci1tb3Rpb25cIl0sXG4vLyAgICAgZXhjbHVkZTogW1wiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIiwgXCJkYXRlLWZuc1wiLCBdLFxuLy8gICB9LFxuLy8gfSk7XG4vLyBpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJ1xuLy8gaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0J1xuXG4vLyAvLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuLy8gZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbi8vICAgcGx1Z2luczogW3JlYWN0KCldLFxuLy8gfSlcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0JztcbmltcG9ydCB0YWlsd2luZGNzcyBmcm9tICdAdGFpbHdpbmRjc3Mvdml0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG5cdHBsdWdpbnM6IFtyZWFjdCgpLCB0YWlsd2luZGNzcygpXSxcblx0c2VydmVyOiB7XG5cdFx0cHJveHk6IHtcblx0XHRcdC8vIFByb3h5IGFueSByZXF1ZXN0cyB0byAnL3VwbG9hZCcgdG8gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODgwMCdcblx0XHRcdCcvdXBsb2FkJzoge1xuXHRcdFx0XHR0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0Ojg4MDAnLFxuXHRcdFx0XHRjaGFuZ2VPcmlnaW46IHRydWUsXG5cdFx0XHRcdHJld3JpdGU6IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoL15cXC91cGxvYWQvLCAnL3VwbG9hZCcpLFxuXHRcdFx0fSxcblx0XHR9LFxuXHR9LFxufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBc0hBLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sV0FBVztBQUNsQixPQUFPLGlCQUFpQjtBQUV4QixJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMzQixTQUFTLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztBQUFBLEVBQ2hDLFFBQVE7QUFBQSxJQUNQLE9BQU87QUFBQTtBQUFBLE1BRU4sV0FBVztBQUFBLFFBQ1YsUUFBUTtBQUFBLFFBQ1IsY0FBYztBQUFBLFFBQ2QsU0FBUyxDQUFDLFNBQVMsS0FBSyxRQUFRLGFBQWEsU0FBUztBQUFBLE1BQ3ZEO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFDRCxDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
